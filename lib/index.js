// Generated by CoffeeScript 1.6.1

/**
 * FIWARE Object Storage GE read/write access
 *
 * You will need your FIWARE account credentials for this module to work.
*/


(function() {
  var atob, auth, btoa, chalk, connectToObjectStorage, container, currentAuthToken, currentFullAuthToken, currentTenant, debug, debugErr, debugInfo, debugLog, debugSuccess, getFile, getFileList, needle, password, putFile, q, qs, url, user;

  needle = require("needle");

  chalk = require("chalk");

  q = require("q");

  btoa = require("btoa");

  atob = require("atob");

  qs = require("qs");

  currentAuthToken = null;

  currentFullAuthToken = null;

  currentTenant = null;

  auth = null;

  url = null;

  user = null;

  password = null;

  container = null;

  chalk.enabled = true;

  debug = true;

  debugInfo = function() {
    return debugLog.apply(null, arguments, "info");
  };

  debugSuccess = function() {
    return debugLog.apply(null, arguments, "success");
  };

  debugErr = function() {
    return debugLog.apply(null, arguments, "error");
  };

  debugLog = function(message, level) {
    var output;
    if (level == null) {
      level = "info";
    }
    if (debug) {
      switch (level) {
        case "info":
          output = chalk.blue("FIWARE") + ": ";
          output += message;
          break;
        case "success":
          output = chalk.green("FIWARE") + ": ";
          output += message;
          break;
        case "error":
          output = chalk.red("FIWARE") + ": ";
          output += chalk.red(message);
      }
      return console.log(output);
    }
  };

  getFile = function(name) {
    var deferred;
    deferred = q.defer();
    if (!currentFullAuthToken) {
      deferred.reject("No Auth Token available");
      return debugErr("No Auth Token available");
    } else {
      debugLog("Getting File " + name + " from " + container + ".");
      needle.get("http://" + url + ":8080/ctm/AUTH_" + currentTenant + "/" + container + "/" + name, {
        headers: {
          "x-auth-token": currentFullAuthToken,
          "x-cdmi-specification-version": "1.0.1"
        }
      }, function(err, contents, body) {
        var parsedBody;
        if (err) {
          return debugErr(err);
        } else {
          debugLog("Got File Contents " + name + " from " + container + ".");
          parsedBody = qs.parse(body.toString());
          return deferred.resolve({
            meta: JSON.parse(parsedBody.meta),
            mimetype: parsedBody.mimetype,
            value: parsedBody.value
          });
        }
      });
    }
    return deferred.promise;
  };

  putFile = function(name, data, meta) {
    var deferred, putData;
    deferred = q.defer();
    if (!currentFullAuthToken) {
      deferred.reject("No Auth Token available");
      return debugErr("No Auth Token available");
    } else {
      debugLog("Uploading File " + name + " to " + container + ".");
      try {
        putData = data;
      } catch (e) {
        debugErr("Error stringifying data file. " + e);
        putData = "";
      }
      needle.put("http://" + url + ":8080/ctm/AUTH_" + currentTenant + "/" + container + "/" + name, {
        mimetype: meta.mimetype,
        meta: JSON.stringify(meta),
        value: putData
      }, {
        headers: {
          "x-auth-token": currentFullAuthToken,
          "content-type": "application/cdmi-object",
          "accept": "application/cdmi-object",
          "x-cdmi-specification-version": "1.0.1"
        }
      }, function(err, putResponse) {
        if (err) {
          deferred.reject(err);
          return debugErr(("Error uploading file " + name + " to " + container + ". ") + err);
        } else {
          deferred.resolve(putResponse != null ? putResponse.body : void 0);
          return debugSuccess("Uploaded File " + name + " to " + container + ".");
        }
      });
    }
    return deferred.promise;
  };

  getFileList = function() {
    var deferred;
    deferred = q.defer();
    if (!currentFullAuthToken) {
      deferred.reject("No Auth Token available");
      return debugErr("No Auth Token available");
    } else {
      debugLog("Listing Files.");
      needle.get("http://" + url + ":8080/ctm/AUTH_" + currentTenant + "/" + container + "/", {
        headers: {
          "x-auth-token": currentFullAuthToken,
          "content-type": "application/cdmi-container",
          "accept": "*/*",
          "x-cdmi-specification-version": "1.0.1"
        }
      }, function(err, listResponse) {
        var item, parsedListData, _i, _j, _len, _len1, _ref, _ref1, _ref2;
        if (err) {
          deferred.reject(err);
          return debugErr("Error getting file list. " + err);
        } else {
          parsedListData = {
            list: [],
            container: container
          };
          _ref1 = listResponse != null ? (_ref = listResponse.body) != null ? _ref.split("\n") : void 0 : void 0;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            item = _ref1[_i];
            if (item.trim()) {
              parsedListData.list.push(item.trim());
            }
          }
          deferred.resolve(parsedListData);
          debugLog("Files in Container [" + chalk.white(container) + "]:");
          _ref2 = parsedListData.list;
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            item = _ref2[_j];
            debugLog(" - " + item, "success");
          }
          if (parsedListData.list.length === 0) {
            return debugLog("No Files in this Container", "info");
          }
        }
      });
    }
    return deferred.promise;
  };

  connectToObjectStorage = function(config, callback) {
    if (callback == null) {
      callback = function() {};
    }
    auth = config.auth, url = config.url, user = config.user, password = config.password, container = config.container;
    debugLog("Connecting to FIWARE Object Storage");
    return needle.request("post", "http://" + auth + ":4730/v2.0/tokens", {
      auth: {
        passwordCredentials: {
          username: user,
          password: password
        }
      }
    }, {
      json: true
    }, function(err, authResponse) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      if (err) {
        return debugErr("Error retrieving Auth Token. " + err);
      } else {
        if ((_ref = authResponse.body) != null ? (_ref1 = _ref.access) != null ? _ref1.token : void 0 : void 0) {
          debugLog(chalk.green("Received Auth Token") + (". Expires " + authResponse.body.access.token.expires));
          currentAuthToken = (_ref2 = authResponse.body) != null ? (_ref3 = _ref2.access) != null ? _ref3.token.id : void 0 : void 0;
        }
        if ((_ref4 = authResponse.body) != null ? (_ref5 = _ref4.access) != null ? (_ref6 = _ref5.user) != null ? _ref6.name : void 0 : void 0 : void 0) {
          debugLog("Connected as " + chalk.green("" + authResponse.body.access.user.name));
        }
        return needle.get("http://" + auth + ":4730/v2.0/tenants", {
          headers: {
            "x-auth-token": currentAuthToken
          },
          json: true
        }, function(err, tenantResponse) {
          var body;
          if (err) {
            debugErr("Error retrieving Tenants. " + err);
            return callback();
          } else {
            try {
              body = JSON.parse(tenantResponse != null ? tenantResponse.body : void 0);
            } catch (e) {
              body = {};
            }
            if (!body.tenants) {
              debugErr("No tenants available.");
              return callback();
            } else {
              debugLog("Received Tenants.");
              debugLog("Selecting Tenant: [" + chalk.green("" + body.tenants[0].name) + ("] " + body.tenants[0].id + " (enabled:") + chalk.green("" + body.tenants[0].enabled) + ")");
              currentTenant = body.tenants[0].id;
              return needle.request("post", "http://" + auth + ":4730/v2.0/tokens", {
                auth: {
                  passwordCredentials: {
                    username: user,
                    password: password
                  },
                  tenantName: currentTenant
                }
              }, {
                json: true
              }, function(err, fullAuthResponse) {
                var _ref10, _ref11, _ref7, _ref8, _ref9;
                if (err) {
                  debugErr("Error receiving Full Token. " + err);
                  return callback();
                } else {
                  if ((_ref7 = fullAuthResponse.body) != null ? (_ref8 = _ref7.access) != null ? _ref8.token : void 0 : void 0) {
                    debugLog("Received Full Token. Expires " + chalk.green("" + ((_ref9 = fullAuthResponse.body) != null ? (_ref10 = _ref9.access) != null ? (_ref11 = _ref10.token) != null ? _ref11.expires : void 0 : void 0 : void 0)), "success");
                    currentFullAuthToken = fullAuthResponse.body.access.token.id;
                    return callback();
                  } else {
                    callback();
                    return debugErr("No Full Token available.");
                  }
                }
              });
            }
          }
        });
      }
    });
  };

  module.exports = function(config) {
    auth = config.auth, url = config.url, user = config.user, password = config.password, container = config.container;
    return {
      connectToObjectStorage: function(callback) {
        return connectToObjectStorage(config, callback);
      },
      getFileList: getFileList,
      putFile: putFile,
      getFile: getFile
    };
  };

}).call(this);
