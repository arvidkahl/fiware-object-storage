// Generated by CoffeeScript 1.9.2

/**
 * FIWARE Object Storage GE read/write access
 * originally created by Arvid Kahl 
 * You will need your FIWARE account credentials for this module to work. 
 * new Object Storage API @FIWARE servers leads to problems, which are now fixed (Finn Malte Hinrichsen, PHAROS GmbH)
 * You will also need the SWIFT URL of your tenant, get it by debugging the second auth call. Example: For lannion2 it is api2.xifi.imaginlab.fr what should be in "url".
 * check the AUTH part at the connection beginning to use another tenant (debug the call and you'll see all the tenants)
 * todo:
 * - dynamical URL gathering from AUTH request (where you get the catalogue with all the tenants)
 * - option: using a fixed, provided tenant ID / name
 * - cleaning debug at stuff 
 */

(function() {
  var atob, auth, btoa, chalk, connectToObjectStorage, container, currentAuthToken, currentFullAuthToken, currentTenant, debug, debugErr, debugInfo, debugLog, debugSuccess, getFile, getFileList, needle, password, putFile, q, qs, url, user;

  needle = require("needle");

  chalk = require("chalk");

  q = require("q");

  btoa = require("btoa");

  atob = require("atob");

  qs = require("qs");

  currentAuthToken = null;

  currentFullAuthToken = null;

  currentTenant = null;

  auth = null;

  url = null;

  user = null;

  password = null;

  container = null;

  chalk.enabled = true;

  debug = true;

  debugInfo = function() {
    return debugLog.apply(null, arguments, "info");
  };

  debugSuccess = function() {
    return debugLog.apply(null, arguments, "success");
  };

  debugErr = function() {
    return debugLog.apply(null, arguments, "error");
  };

  debugLog = function(message, level) {
    var output;
    if (level == null) {
      level = "info";
    }
    if (debug) {
      switch (level) {
        case "info":
          output = chalk.blue("FIWARE") + ": ";
          output += message;
          break;
        case "success":
          output = chalk.green("FIWARE") + ": ";
          output += message;
          break;
        case "error":
          output = chalk.red("FIWARE") + ": ";
          output += chalk.red(message);
      }
      return console.log(output);
    }
  };

  getFile = function(name) {
    var deferred;
    deferred = q.defer();
    if (!currentFullAuthToken) {
      deferred.reject("No Auth Token available");
      return debugErr("No Auth Token available");
    } else {
      debugLog("Getting File " + name + " from " + container + ".");
      needle.get("http://" + url + ":8080/v1/AUTH_" + currentTenant + "/" + container + "/" + name, {
        headers: {
          "x-auth-token": currentFullAuthToken,
          "x-cdmi-specification-version": "1.0.1"
        }
      }, function(err, contents, body) {
        var parsedBody;
        if (err) {
          return debugErr(err);
        } else {
          debugLog("Got File Contents " + name + " from " + container + ".");
          parsedBody = qs.parse(body.toString());
          return deferred.resolve({
            meta: JSON.parse(parsedBody.meta),
            mimetype: parsedBody.mimetype,
            value: parsedBody.value
          });
        }
      });
    }
    return deferred.promise;
  };

  putFile = function(name, data, meta) {
    var deferred, e, putData;
    deferred = q.defer();
    if (!currentFullAuthToken) {
      deferred.reject("No Auth Token available");
      return debugErr("No Auth Token available");
    } else {
      debugLog("Uploading File " + name + " to " + container + ".");
      try {
        putData = data;
      } catch (_error) {
        e = _error;
        debugErr("Error stringifying data file. " + e);
        putData = "";
      }
      needle.put("http://" + url + ":8080/v1/AUTH_" + currentTenant + "/" + container + "/" + name, {
        mimetype: meta.mimetype,
        meta: JSON.stringify(meta),
        value: putData
      }, {
        headers: {
          "x-auth-token": currentFullAuthToken,
          "content-type": "application/cdmi-object",
          "accept": "application/cdmi-object",
          "x-cdmi-specification-version": "1.0.1"
        }
      }, function(err, putResponse) {
        if (err) {
          deferred.reject(err);
          return debugErr(("Error uploading file " + name + " to " + container + ". ") + err);
        } else {
          deferred.resolve(putResponse != null ? putResponse.body : void 0);
          return debugSuccess("Uploaded File " + name + " to " + container + ".");
        }
      });
    }
    return deferred.promise;
  };

  getFileList = function() {
    var deferred;
    deferred = q.defer();
    if (!currentFullAuthToken) {
      deferred.reject("No Auth Token available");
      return debugErr("No Auth Token available");
    } else {
      debugLog("Listing Files.");
      console.log(currentTenant);

    needle.get("http://" + url + ":8080/v1/AUTH_" + currentTenant + "/" + container + "/", {


        headers: {
          "X-Auth-Token": currentFullAuthToken,
          "content-type": "application/cdmi-container",
          "accept": "*/*",
          "x-cdmi-specification-version": "1.0.1,1.0.2,1.5,2.0"
        }
      }, function(err, listResponse) { 
        
        console.log("-------------------- listResponse.body");
        console.log(listResponse);
        
        var i, item, j, len, len1, parsedListData, ref, ref1, ref2;
        if (err) {
          deferred.reject(err);
          return debugErr("Error getting file list. " + err);
        } else {
          parsedListData = {
            list: [],
            container: container
          };
          console.log(ref);
         ref1 = listResponse != null ? (ref = listResponse.body) != null ? ref.split("\n") : void 0 : void 0;
        //  ref1 = listResponse.body;
          console.log("-------------------- ref");
          console.log(ref);
          console.log("-------------------- stringify(ref1)");
          console.log(JSON.stringify(ref));
          console.log("-------------------- parsedListData");
          console.log(parsedListData);
          console.log("--------------------");
          for (i = 0, len = ref1.length; i < len; i++) {
            item = ref1[i];
            if (item.trim()) {
              parsedListData.list.push(item.trim());
            }
          }
          deferred.resolve(parsedListData);
          debugLog("Files in Container [" + chalk.white(container) + "]:");
          ref2 = parsedListData.list;
          for (j = 0, len1 = ref2.length; j < len1; j++) {
            item = ref2[j];
            debugLog(" - " + item, "success");
          }
          if (parsedListData.list.length === 0) {
            return debugLog("No Files in this Container", "info");
          }
        }
      });
    }
    return deferred.promise;
  };

  connectToObjectStorage = function(config, callback) {
    if (callback == null) {
      callback = function() {};
    }
    auth = config.auth, url = config.url, user = config.user, password = config.password, container = config.container;
    debugLog("Connecting to FIWARE Object Storage");
    return needle.request("post", "http://" + auth + ":4730/v2.0/tokens", {
      auth: {
        passwordCredentials: {
          username: user,
          password: password
        }
      }
    }, {
      json: true
    }, function(err, authResponse) {
      var ref, ref1, ref2, ref3, ref4, ref5, ref6;
      if (err) {
        return debugErr("Error retrieving Auth Token. " + err);
      } else {
        if ((ref = authResponse.body) != null ? (ref1 = ref.access) != null ? ref1.token : void 0 : void 0) {
          debugLog(chalk.green("Received Auth Token") + (". Expires " + authResponse.body.access.token.expires));
          currentAuthToken = (ref2 = authResponse.body) != null ? (ref3 = ref2.access) != null ? ref3.token.id : void 0 : void 0;
        }
        if ((ref4 = authResponse.body) != null ? (ref5 = ref4.access) != null ? (ref6 = ref5.user) != null ? ref6.name : void 0 : void 0 : void 0) {
          debugLog("Connected as " + chalk.green("" + authResponse.body.access.user.name));
        }
        return needle.get("http://" + auth + ":4730/v2.0/tenants", {
          headers: {
            "x-auth-token": currentAuthToken
          },
          json: true
        }, function(err, tenantResponse) {
          var body, e;
          if (err) {
            debugErr("Error retrieving Tenants. " + err);
            return callback();
          } else {
            try {
              //console.log('tenantresponse');
              //console.log(tenantResponse);
              //console.log(tenantResponse.body);
              //body = JSON.parse(tenantResponse != null ? tenantResponse.body : void 0);
              //t1 = JSON.parse(tenantResponse.body.tenants[0]);
              //console.log(tenantResponse.body.tenants[0].idÃ‡);
              t1_name = tenantResponse.body.tenants[0].name;
              //console.log("=========");
              //console.log(t1_name);
              t1_id = tenantResponse.body.tenants[0].id;  

            } catch (_error) {
              e = _error;
              console.log(e);
              body = {};
            }
            if (t1_id === false) {
              debugErr("No tenants available.");
              return callback();
            } else {
              //console.log(tenantResponse.body.tenants);
              //body = JSON.parse(tenantResponse.body);
              debugLog("Received Tenants.");
              
              //debugLog("Selecting Tenant: [" + chalk.green("" + body.tenants[0].name) + ("] " + body.tenants[0].id + " (enabled:") + chalk.green("" + body.tenants[0].enabled) + ")");
              //debugLog("Selecting Tenant: [" + chalk.green("" + t1.name) + ("] " + t1.id + " (enabled:") + chalk.green("" + t1.enabled) + ")");
              
              debugLog("Selecting Tenant: " + t1_id );
              currentTenant = t1_id;
              return needle.request("post", "http://" + auth + ":4730/v2.0/tokens", {
                auth: {
                  passwordCredentials: {
                    username: user,
                    password: password
                  },
                  tenantId: currentTenant
                }
              }, {
                json: true
              }, function(err, fullAuthResponse) {

             //   console.log(fullAuthResponse);
                var ref10, ref11, ref7, ref8, ref9;
                if (err) {
                  debugErr("Error receiving Full Token. " + err);
                  return callback();
                } else {
               //     console.log(fullAuthResponse.body.access.token.id)
                    currentFullAuthToken = fullAuthResponse.body.access.token.id;
                    return callback();
                  
                  /*

                  // old code
                  if ((ref7 = fullAuthResponse.body) != null ? (ref8 = ref7.access) != null ? ref8.token : void 0 : void 0) {
                    debugLog("Received Full Token. Expires " + chalk.green("" + ((ref9 = fullAuthResponse.body) != null ? (ref10 = ref9.access) != null ? (ref11 = ref10.token) != null ? ref11.expires : void 0 : void 0 : void 0)), "success");
                    currentFullAuthToken = fullAuthResponse.body.access.token.id;
                    return callback();
                  } else {
                    callback();
                    return debugErr("No Full Token available.");
                  }
                  */
                }
              });
            }
          }
        });
      }
    });
  };

  module.exports = function(config) {
    auth = config.auth, url = config.url, user = config.user, password = config.password, container = config.container;
    return {
      connectToObjectStorage: function(callback) {
        return connectToObjectStorage(config, callback);
      },
      getFileList: getFileList,
      putFile: putFile,
      getFile: getFile
    };
  };

}).call(this);
